name: buildProject
on:
  #14workflow_dispatch: {}
  push: {}
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  makeIssuesArray:
    if: github.repository != 'n8sOrganization/project-automation'  
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.issueArray.outputs.matrix }}
      totalCount: ${{ steps.issueArray.outputs.totalCount }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: issueArray 
        id: issueArray 
        run: |
         issueNumber=0
         for file in .github/seed-issues/*; do
           issueNumber=$((issueNumber+1))
         done
         echo "::set-output name=totalCount::$issueNumber"
         for file in .github/seed-issues/*; do
           JSON+=$(echo "{\"issue\":\"$file\",\"issueNumber\":$issueNumber},")
           issueNumber=$((issueNumber-1))
         done
         JSON=${JSON%?}
         JSON="{\"include\":["$JSON"]}"
         JSON=$(echo $JSON | jq -c --sort-keys '.[] | reverse')
         JSON="{\"include\":"$JSON"}"
         echo "::set-output name=matrix::$JSON" 
  createColumns:
    if: github.repository != 'n8sOrganization/project-automation'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: createProject
        uses: matthewferry/create-a-project@v1
        with:
          name: "POC"
          description: POC Project Board
          columns: |
            ToDo
            inProgress
            Complete      
  createIssues:
    runs-on: ubuntu-latest
    needs: [makeIssuesArray, createColumns]
    strategy:
      matrix: ${{ fromJson(needs.makeIssuesArray.outputs.matrix) }}
      max-parallel: 5
    steps:
      - name: setVars
        if: format(matrix.issueNumber) != 1
        run: |
          issueNum=$(( (${{ matrix.issueNumber }} - 1) ))
          fileIssueNum=$(( (${{ matrix.issueNumber }} - 2) ))
          issue=$(echo '${{ needs.makeIssuesArray.outputs.matrix }}' | jq -r --argjson fileIssueNum "$fileIssueNum" '.include[$fileIssueNum].issue')
          combinedIssue=$(echo "createIssues ($issue, $issueNum)")
          echo "WAIT_FOR=$combinedIssue" >> $GITHUB_ENV
      - name: Run in order
        if: format(matrix.issueNumber) != 1
        uses: lewagon/wait-on-check-action@v1.0.0
        with:
          ref: ${{ github.ref }}
          check-name: ${{ env.WAIT_FOR }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create issue
        uses: JasonEtco/create-an-issue@v2
        with:
          filename: ${{ matrix.issue }}
      - name: Delay to prevent race
        run: |  
         sleep 5
      - name: Create Project Card
        uses: peter-evans/create-or-update-project-card@v1
        with:
          project-name: POC
          column-name: ToDo
          issue-number: ${{ matrix.issueNumber }}
